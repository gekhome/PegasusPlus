@using PegasusPlus.Models
@using PegasusPlus.DAL

@{
    ViewBag.Title = "Έλεγχος αιτήσεων";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
    string schoolYear = ViewData["schoolYearText"].ToString();
    string protocol = ViewData["prokirixiProtocol"].ToString();
    string displayInfo = schoolYear + " - " + protocol;
}


<div class="page-header mt-2" style="margin:5px 30px 5px 50px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:18px">
        <font style="color:#494949;float:left;font-family:'Segoe UI';text-shadow:1px 1px #696969">Έλεγχος αιτήσεων</font>
        <font style="color:#494949;float:left;font-family:'Segoe UI';font-weight:600;margin-left:40px">Προκήρυξη: @displayInfo</font>
    </span>
    <span style="margin:0px 15px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>


<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().Grid<TeacherAitiseisViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.TeacherAFM).Title("ΑΦΜ").Width(18).Groupable(true);
            columns.Bound(c => c.AitisisProtocol).Title("Αρ.Πρωτ.").Width(25).Groupable(true);
            columns.Bound(c => c.FullName).Title("Ονοματεπώνυμο").Width(40)
                .ClientFooterTemplate("Ολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.EidikotitaText).Title("Κλάδος-Ειδικότητα").Width(60);
            columns.Bound(c => c.SchoolName).Title("Σχολείο").Width(30);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("EditAitisi", "School") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Αίτηση</a>"
            ).Width(25);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("EditPersonal", "School") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Προσωπικά</a>"
            ).Width(25);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("EditSkills", "School") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Προσόντα</a>"
            ).Width(25);
        })
        .HtmlAttributes(new { style = "font-size:13px" })
        .Filterable()
        .Groupable()
        .Selectable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(380))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.AitisisID);
        })
        .Aggregates(a =>
        {
            a.Add(p => p.FullName).Count();
        })
        .Read(read => read.Action("AitiseisAudit_Read", "School"))
    )
    .Events(events => events.Change("change"))
    )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().TabStrip()
    .Name("WorkTabStrip")
    .Items(items =>
    {
        items.Add()
        .Text("Διδακτικές")
        .Selected(true)
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkTeachingViewModel>()
                .Name("Child1")
                .Columns(columns =>
                {
                    columns.ForeignKey(f => f.SchoolYear, (IEnumerable<SysSchoolYears>)ViewData["school_years"], "SchoolYearID", "SchoolYearText").Width(20);
                    columns.ForeignKey(f => f.TeachType, (IEnumerable<SysTeachTypes>)ViewData["teach_types"], "TypeID", "TypeText").Width(35);
                    columns.Bound(c => c.DateStart).Width(20).Title("Από").Groupable(false);
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως").Groupable(false);
                    columns.Bound(c => c.HoursTotal).Width(20).Groupable(false);
                    columns.Bound(c => c.Moria).Width(20).Groupable(false);
                    columns.Command(command => { command.Edit(); }).Width(25);
                })
                .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(640).Title("Καρτέλα διδακτικής εμπειρίας")).TemplateName("FormTeaching2"))
                .HtmlAttributes(new { style = "font-size:13px" })
                .Events(e => e.Edit("onEdited1"))
                .Navigatable()
                .Selectable()
                .Groupable()
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(340))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                    model.Field(p => p.TeachType).DefaultValue(0);
                    model.Field(p => p.SchoolYear).DefaultValue(0);
                    model.Field(p => p.Moria).Editable(false);
                })
                .Group(groups => groups.Add(p => p.TeachType))
                .Read(read => read.Action("Teaching_Read", "School").Data("data"))
                .Update(update => update.Action("Teaching_Update", "School").Data("data"))
                .Events(events => events.Error("error_handler1"))
                )
                .Events(events => events.Change("changeTeach"))
                )
            </div>
            </text>);
        items.Add()
        .Text("Επαγγελματικές")
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkVocationViewModel>()
                .Name("Child2")
                .Columns(columns =>
                {
                    columns.Bound(c => c.DateStart).Width(20).Title("Από");
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως");
                    columns.Bound(c => c.DaysAuto).Width(20).HtmlAttributes(new { title = "Αυτόματος υπολογισμός βάσει έτους πλήρους απασχόλησης" });
                    columns.Bound(c => c.DaysManual).Width(20).HtmlAttributes(new { title = "Παρακάμπτει τον αυτόματο υπολογισμός ημερών απασχόλησης" });
                    columns.Bound(c => c.Moria).Width(20);
                    columns.Command(command => { command.Edit(); }).Width(25);
                })
                .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(640).Title("Καρτέλα επαγγελματικής εμπειρίας")).TemplateName("FormVocation2"))
                .HtmlAttributes(new { style = "font-size:13px" })
                .Events(e => e.Edit("onEdited2"))
                .Navigatable()
                .Selectable()
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(320))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                    model.Field(p => p.Moria).Editable(false);
                    model.Field(p => p.DaysAuto).Editable(false);
                })
                .Read(read => read.Action("Vocation_Read", "School").Data("data"))
                .Update(update => update.Action("Vocation_Update", "School").Data("data"))
                .Events(events => events.Error("error_handler2"))
                )
                .Events(events => events.Change("changeVocation"))
                )
            </div>
            </text>);
        items.Add()
        .Text("Επιτήδευμα")
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkFreelanceViewModel>()
                .Name("Child3")
                .Columns(columns =>
                {
                    columns.ForeignKey(f => f.IncomeYear, (IEnumerable<SysTaxFree>)ViewData["income_years"], "YearID", "YearText").Width(20);
                    columns.Bound(c => c.Income).Width(20).Groupable(false);
                    columns.Bound(c => c.DateStart).Width(20).Title("Από").Groupable(false);
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως").Groupable(false);
                    columns.Bound(c => c.DaysAuto).Width(20).Groupable(false).HtmlAttributes(new { title = "Αυτόματος υπολογισμός βάσει έτους πλήρους απασχόλησης" });
                    columns.Bound(c => c.DaysManual).Width(20).Groupable(false).HtmlAttributes(new { title = "Παρακάμπτει τον αυτόματο υπολογισμό ημερών απασχόλησης" });
                    columns.Bound(c => c.Moria).Width(20).Groupable(false);
                    columns.Command(command => { command.Edit(); }).Width(25);
                })
                .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(640).Title("Καρτέλα επιτηδεύματος")).TemplateName("FormFreelance2"))
                .HtmlAttributes(new { style = "font-size:13px" })
                .Events(e => e.Edit("onEdited3"))
                .Navigatable()
                .Selectable()
                .Groupable()
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(300))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                    model.Field(p => p.IncomeYear).DefaultValue(0);
                    model.Field(p => p.Moria).Editable(false);
                    model.Field(p => p.DaysAuto).Editable(false);
                })
                .Read(read => read.Action("Freelance_Read", "School").Data("data"))
                .Update(update => update.Action("Freelance_Update", "School").Data("data"))
                .Events(events => events.Error("error_handler3"))
                )
                .Events(events => events.Change("changeFreelance"))
                )
            </div>
            </text>);
    })
    )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().TabStrip()
    .Name("FilesTabStrip")
    .Items(items =>
    {
        items.Add()
        .Text("Αρχεία διδακτικής")
        .Selected(true)
        .Content(
            @<text>
            <div id="teaching-files">
                @(Html.Kendo().Grid<UploadsTeachingViewModel>()
                    .Name("FilesTeach")
                    .AutoBind(false)
                    .HtmlAttributes(new { style = "font-size:16px" })
                    .Filterable()
                    .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
                    .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                    .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                    .Scrollable(scr => scr.Height(200))
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.UploadFileID).Width(20).Hidden();
                        columns.Bound(c => c.FileName).Width(40);
                        columns.Bound(c => c.Description).Width(30);
                        columns.Bound(c => c.Category).Width(20);
                        columns.Command(command => { command.Custom("\u13EB" + " Προβολή").Click("showPDF"); }).Width(30);
                    })
                    .DataSource(ds => ds
                    .Ajax()
                    .Batch(false)
                    .PageSize(20)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(p => p.UploadFileID);
                    })
                    .Read(read => read.Action("TeachingFiles_Read", "School").Data("dataTeach"))
                    )
                )
            </div>
            </text>);
        items.Add()
        .Text("Αρχεία επαγγελματικής")
        .Selected(false)
        .Content(
            @<text>
            <div id="vocation-files">
                @(Html.Kendo().Grid<UploadsVocationViewModel>()
                .Name("FilesVocation")
                .AutoBind(false)
                .HtmlAttributes(new { style = "font-size:16px" })
                .Filterable()
                .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .Scrollable(scr => scr.Height(240))
                .Columns(columns =>
                {
                    columns.Bound(c => c.UploadFileID).Width(20).Hidden();
                    columns.Bound(c => c.FileName).Width(40);
                    columns.Bound(c => c.Description).Width(30);
                    columns.Bound(c => c.Category).Width(20);
                    columns.Command(command => { command.Custom("\u13EB" + " Προβολή").Click("showPDF"); }).Width(30);
                })
                .DataSource(ds => ds
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.UploadFileID);
                })
                .Read(read => read.Action("VocationFiles_Read", "School").Data("dataVocation"))
                )
                )
            </div>
            </text>);
        items.Add()
        .Text("Αρχεία επιτηδεύματος")
        .Selected(false)
        .Content(
            @<text>
            <div id="freelance-files">
                @(Html.Kendo().Grid<UploadsFreelanceViewModel>()
                .Name("FilesFreelance")
                .AutoBind(false)
                .HtmlAttributes(new { style = "font-size:16px" })
                .Filterable()
                .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .Scrollable(scr => scr.Height(240))
                .Columns(columns =>
                {
                    columns.Bound(c => c.UploadFileID).Width(20).Hidden();
                    columns.Bound(c => c.FileName).Width(40);
                    columns.Bound(c => c.Description).Width(30);
                    columns.Bound(c => c.Category).Width(20);
                    columns.Command(command => { command.Custom("\u13EB" + " Προβολή").Click("showPDF"); }).Width(30);
                })
                .DataSource(ds => ds
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.UploadFileID);
                })
                .Read(read => read.Action("FreelanceFiles_Read", "School").Data("dataFreelance"))
                )
                )
            </div>
            </text>);
        })
        )
</div>

<div id="dialog" style="display: none">
</div>

<script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.11.4/jquery-ui.js" type="text/javascript"></script>
<link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css" />


<script type="text/javascript">

    function changeTeach(e) {
        var dataItem = this.dataItem(this.select());
        var experienceID = dataItem.ExperienceID;

        $("#FilesTeach").data("kendoGrid").dataSource.read({ expId: experienceID });
    }

    function dataTeach() {
        var masterGrid = $("#Child1").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { expId: dataItem.ExperienceID };
        }
        else {
            return { expId: 0 };
        }
    }

    function changeVocation(e) {
        var dataItem = this.dataItem(this.select());
        var experienceID = dataItem.ExperienceID;

        $("#FilesVocation").data("kendoGrid").dataSource.read({ expId: experienceID });
    }

    function dataVocation() {
        var masterGrid = $("#Child2").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { expId: dataItem.ExperienceID };
        }
        else {
            return { expId: 0 };
        }
    }

    function changeFreelance(e) {
        var dataItem = this.dataItem(this.select());
        var experienceID = dataItem.ExperienceID;

        $("#FilesFreelance").data("kendoGrid").dataSource.read({ expId: experienceID });
    }

    function dataFreelance() {
        var masterGrid = $("#Child3").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { expId: dataItem.ExperienceID };
        }
        else {
            return { expId: 0 };
        }
    }

    function showPDF(e) {
        e.preventDefault();
        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var data = this.dataItem(row);

        var currentDomain = '@Url.Content("~")';
        var url = currentDomain + "Uploads/FilesExperience/" + data.TeacherAFM + "/";
        fileName = data.FileName;

        $("#dialog").dialog({
            modal: true,
            title: fileName,
            width: 800,
            height: 600,
            buttons: {
                Κλείσιμο: function () {
                    $(this).dialog('close');
                }
            },
            open: function () {
                var object = "<object data=\"{FileName}\" type=\"application/pdf\" width=\"800px\" height=\"600px\"></object>";
                object = object.replace(/{FileName}/g, url + fileName);
                $("#dialog").html(object);
            }
        });
    }


</script>

<script type="text/javascript">

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

    function RefreshChild1(e) {
        var grid = $("#Child1").data("kendoGrid");
        grid.dataSource.read();
    }

    function RefreshChild2(e) {
        var grid = $("#Child2").data("kendoGrid");
        grid.dataSource.read();
    }

    function RefreshChild3(e) {
        var grid = $("#Child3").data("kendoGrid");
        grid.dataSource.read();
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var aitisiID = dataItem.AitisisID;

        $("#Child1").data("kendoGrid").dataSource.read({ aitisiId: aitisiID });
        $("#Child2").data("kendoGrid").dataSource.read({ aitisiId: aitisiID });
        $("#Child3").data("kendoGrid").dataSource.read({ aitisiID: aitisiID });
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { aitisiId: dataItem.AitisisID };
        }
        else {
            return { aitisiId: 0 };
        }
    }

    function onEdited1(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshChild1(e); });
    }

    function onEdited2(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshChild2(e); });
    }

    function onEdited3(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshChild3(e); });
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child1").data("kendoGrid").dataSource.read();
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child2").data("kendoGrid").dataSource.read();
    }

    function error_handler3(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child3").data("kendoGrid").dataSource.read();
    }
</script>
