@using PegasusPlus.Models
@using PegasusPlus.DAL

@{
    ViewBag.Title = "Μοριοδότηση αιτήσεων";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    string schoolYear = ViewData["schoolYearText"].ToString();
    string protocol = ViewData["prokirixiProtocol"].ToString();
    string displayInfo = schoolYear + " - " + protocol;
}


<div class="page-header">
    <div style="margin:5px 60px 5px 40px">
        <span style="font-family:'Segoe UI';font-size:18px;text-shadow:1px 1px #696969">
            <font style="color:#292929;">Μοριοδότηση αιτήσεων και σχολεία επιλογής &nbsp;&nbsp;&nbsp; Προκήρυξη: @displayInfo</font>
        </span>
        <span style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';">
            @Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:15px" })
        </span>
        <div style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';">
            <button class="btn btn-danger" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:15px" onclick="Moriodotisi()" 
                    title="Μοριοδότησηση όλων των αιτήσεων της τρέχουσας προκήρυξης">Μοριοδότηση
            </button>
        </div>
        <div id="divLoading" style="margin:0px 10px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px; z-index: 30001;display:none">
            <p id="message-icon" style="margin-right:5px; font-size:13px;color:#00008b;font-weight:500">
                Μοριοδότηση σε εξέλιξη. Περιμένετε...<img id="ajax-icon" src="~/Images/other/progress4.gif" style="margin-left:5px;width:36px;height:36px">
            </p>
        </div>
    </div>
</div>

<div class="body-content mt-3" style="margin:5px 20px 5px 20px">
    @(Html.Kendo().Grid<TeacherAitiseisViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
        columns.Bound(x => x.TeacherAFM).Width(20).Groupable(false);
        columns.Bound(x => x.FullName).Width(30).Groupable(false)
            .ClientFooterTemplate("Ολικό: #=count#")
            .ClientGroupFooterTemplate("Σύνολο: #=count#");
        columns.Bound(x => x.AitisisProtocol).Width(20).Groupable(false);
        columns.Bound(x => x.EidikotitaText).Width(40);
        columns.Bound(c => c.SchoolName).Width(30);
        columns.Bound(c => c.PeriferiaName).Width(40);
        columns.Bound(c => c.OaedCheckStatus).Width(15).ClientTemplate("<input type='checkbox' #= OaedCheckStatus ? checked='checked' : '' # ></input>");
        columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiMoriaView", "Admin") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Προβολή</a>"
            ).Width(24);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiMoriaPrint", "Admin") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-print\"></span>Εκτύπωση</a>"
            ).Width(24);
        })
        .Filterable()
        .Selectable()
        .Groupable()
        .HtmlAttributes(new { style = "font-size:12px" })
        .Scrollable(scr => scr.Height(480))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(3))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.AitisisID);
        })
        .Read(read => read.Action("AitiseisMoria_Read", "Admin"))
        .Events(e => e.Error("error_handler1"))
        .Aggregates(a =>
        {
            a.Add(p => p.FullName).Count();
        })
        )
        .Events(events => events.Change("change"))
    )
</div>

<div class="body-content mt-3" style="margin:5px 20px 5px 20px">
    @(Html.Kendo().Grid<AitisiSchoolsViewModel>()
        .Name("Child")
        .Columns(columns =>
        {
            columns.ForeignKey(x => x.SchoolID, (IEnumerable<SchoolsViewModel>)ViewData["schools"], "SchoolID", "SchoolName").Width(60).EditorTemplateName("AitisiSchoolSelector");
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Filterable()
        .AutoBind(false)
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Scrollable(scr => scr.Height(220))
        .HtmlAttributes(new { style = "display: block;font-size:14px" })
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(3))
        .DataSource(datasource => datasource
        .Ajax()
        .Batch(false)
        .PageSize(20)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.RowID);
            model.Field(p => p.SchoolID).DefaultValue((int)ViewData["defaultSchool"]);
        })
        .Read(read => read.Action("Schools_Read", "Admin").Data("data"))
        .Create(create => create.Action("Schools_Create", "Admin").Data("data"))
        .Update(update => update.Action("Schools_Update", "Admin").Data("data"))
        .Destroy(destroy => destroy.Action("Schools_Destroy", "Admin"))
        .Events(events => events.Error("error_handler2"))
        )
    )

</div>



<script type="text/javascript">

    function filterSchools() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { aitisiID: dataItem.AitisisID };
        }
        else {
            return { aitisiID: 0 };
        }
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { aitisiID: dataItem.AitisisID };
        }
        else {
            return { aitisiID: 0 };
        }
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var aitisiId = dataItem.AitisisID;

        $("#Child").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
    }


    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            $("#Master").data("kendoGrid").dataSource.read();
        }
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            $("#Child").data("kendoGrid").dataSource.read();
        }
    }

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

</script>

<script type="text/javascript">

    function Moriodotisi() {
        text = "Η διαδικασία αυτή εκτελεί την τελική μοριοδότηση όλων των αιτήσεων της τρέχουσας προκήρυξης.<br/>";
        text += "Να γίνει η μαζική μοριοδότηση όλων των αιτήσεων;"
        MessageBoxConfirm(text, "Ολική μοριοδότηση (Supernova)").done(function () {
            $('#divLoading').show();
            $.ajax({
                url: '@Url.Action("Supernova", "Admin")',
                type: 'GET',
                data: "",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#divLoading').hide();
                    if (data) MessageBoxAlert(data);
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.");
                }
            });
        }).fail(function () {
            return;
        });
    }

</script>



