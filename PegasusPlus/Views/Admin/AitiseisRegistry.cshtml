@using PegasusPlus.Models
@using PegasusPlus.DAL

@{
    ViewBag.Title = "Μητρώο αιτήσεων";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="page-header mt-2" style="margin:5px 30px 5px 50px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:18px">
        <font style="color:#494949;float:left;font-family:'Segoe UI';text-shadow:1px 1px #696969">Μητρώο αιτήσεων</font>
    </span>
    <span style="margin:0px 15px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
    <button class="btn btn-danger" style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="UpdateGroups()">Ομάδες ειδικοτήτων</button>
    <div id="divLoading" style="margin:0px 10px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px; z-index: 30001;display:none">
        <p id="message-icon" style="margin-right:5px; font-size:13px;color:#00008b;font-weight:500">
            Ενημέρωση σε εξέλιξη. Περιμένετε...<img id="ajax-icon" src="~/Images/other/progress4.gif" style="margin-left:5px;width:30px;height:30px">
        </p>
    </div>
</div>

<div class="body-content" style="margin:5px 20px 5px 20px">
    @(Html.Kendo().Grid<sqlTeacherAitiseis>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.Protocol).Title("Προκήρυξη").Width(24);
            columns.Bound(c => c.TeacherAFM).Title("Α.Φ.Μ.").Width(16).Groupable(false);
            columns.Bound(c => c.FullName).Title("Ονοματεπώνυμο").Width(40)
                .ClientFooterTemplate("Ολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.EidikotitaText).Title("Κλάδος-Ειδικότητα").Width(40);
            columns.Bound(c => c.PeriferiaName).Title("Περιφέρεια Αίτησης").Width(45);
            columns.Bound(c => c.SchoolName).Title("ΙΕΚ Αίτησης").Width(30);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiMoriaView", "Admin") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Προβολή</a>"
            ).Width(22);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiMoriaPrint", "Admin") + "?aitisiId=#=AitisisID#' target = _blank><span class=\"k-icon k-edit\"></span>Μόρια</a>"
            ).Width(20);
        })
        .HtmlAttributes(new { style = "font-size:13px" })
        .Filterable()
        .Groupable()
        .Selectable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(400))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.AitisisID);
        })
        .Aggregates(a =>
        {
            a.Add(p => p.FullName).Count();
        })
        .Read(read => read.Action("Aitiseis_ReadGlobal", "Admin"))
        .Events(events => events.Error("error_handler"))
    )
    .Events(e => e.Change("change"))
    )
</div>

<div class="body-content ml-4 mr-4" style="margin:10px 20px 5px 20px;font-size:14px;background-color:#4f81bd;padding:4px 4px 4px 4px;min-height:34px">
    <label style="font-size:14px;font-weight:bold;color:white">Προκήρυξη : </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlProkirixeis")
        .DataTextField("Protocol")
        .DataValueField("ProkirixiID")
        .HtmlAttributes(new { style = "width:220px;font-size:14px;font-weight:bold" })
        .OptionLabel("Επιλογή...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetProkirixeis", "Admin"); }).ServerFiltering(true); })
        .Events(e =>
        {
            e.Select("ddlselect");
        })
    )
    <span style="margin-right:5px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:14px" type="button" onclick="printExperience()" title="Εκτύπωση προϋπηρεσιών επιλεγμένης αίτησης" value="Εκτύπωση προϋπηρεσιών" class="btn btn-default" />
    </span>
</div>


<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().TabStrip()
    .Name("WorkTabStrip")
    .Items(items =>
    {
        items.Add()
        .Text("Διδακτικές")
        .Selected(true)
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkTeachingViewModel>()
                .Name("Child1")
                .Columns(columns =>
                {
                    columns.ForeignKey(f => f.SchoolYear, (IEnumerable<SysSchoolYears>)ViewData["school_years"], "SchoolYearID", "SchoolYearText").Width(20);
                    columns.ForeignKey(f => f.TeachType, (IEnumerable<SysTeachTypes>)ViewData["teach_types"], "TypeID", "TypeText").Width(35);
                    columns.Bound(c => c.DateStart).Width(20).Title("Από").Groupable(false);
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως").Groupable(false);
                    columns.Bound(c => c.HoursTotal).Width(20).Groupable(false);
                    columns.Bound(c => c.Moria).Width(20).Groupable(false);
                    columns.Bound(c => c.DocumentForeas).Width(30);
                })
                .HtmlAttributes(new { style = "font-size:13px" })
                .Groupable()
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(340))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                    model.Field(p => p.TeachType).DefaultValue(0);
                    model.Field(p => p.SchoolYear).DefaultValue(0);
                })
                .Group(groups => groups.Add(p => p.TeachType))
                .Read(read => read.Action("Teaching_Read", "Admin").Data("data"))
                )
                )
            </div>
            </text>);
        items.Add()
        .Text("Επαγγελματικές")
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkVocationViewModel>()
                .Name("Child2")
                .Columns(columns =>
                {
                    columns.Bound(c => c.DateStart).Width(20).Title("Από");
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως");
                    columns.Bound(c => c.DaysAuto).Width(20).HtmlAttributes(new { title = "Αυτόματος υπολογισμός βάσει έτους πλήρους απασχόλησης" });
                    columns.Bound(c => c.DaysManual).Width(20).HtmlAttributes(new { title = "Παρακάμπτει τον αυτόματο υπολογισμός ημερών απασχόλησης" });
                    columns.Bound(c => c.Moria).Width(20);
                    columns.Bound(c => c.DocumentForeas).Width(30);
                })
                .HtmlAttributes(new { style = "font-size:13px" })
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(320))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                })
                .Read(read => read.Action("Vocation_Read", "Experience").Data("data"))
                )
                )
            </div>
            </text>);
        items.Add()
        .Text("Επιτήδευμα")
        .Content(
            @<text>
            <div class="row ml-1 mr-1">
                @(Html.Kendo().Grid<WorkFreelanceViewModel>()
                .Name("Child3")
                .Columns(columns =>
                {
                    columns.ForeignKey(f => f.IncomeYear, (IEnumerable<SysTaxFree>)ViewData["income_years"], "YearID", "YearText").Width(20);
                    columns.Bound(c => c.Income).Width(20).Groupable(false);
                    columns.Bound(c => c.DateStart).Width(20).Title("Από").Groupable(false);
                    columns.Bound(c => c.DateFinal).Width(20).Title("Έως").Groupable(false);
                    columns.Bound(c => c.DaysAuto).Width(20).Groupable(false).HtmlAttributes(new { title = "Αυτόματος υπολογισμός βάσει έτους πλήρους απασχόλησης" });
                    columns.Bound(c => c.DaysManual).Width(20).Groupable(false).HtmlAttributes(new { title = "Παρακάμπτει τον αυτόματο υπολογισμό ημερών απασχόλησης" });
                    columns.Bound(c => c.Moria).Width(20).Groupable(false);
                    columns.Bound(c => c.WorkEvidence).Width(30);
                })
                .HtmlAttributes(new { style = "font-size:13px" })
                .Groupable()
                .Filterable()
                .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
                .Scrollable(scr => scr.Height(300))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(datasource => datasource
                .Ajax()
                .PageSize(40)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(p => p.ExperienceID);
                    model.Field(p => p.IncomeYear).DefaultValue(0);
                })
                .Read(read => read.Action("Freelance_Read", "Admin").Data("data"))
                )
                )
            </div>
            </text>);
    })
    )
</div>


<script type="text/javascript">
    
    function printExperience() {
        var masterGrid = $("#Grid").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            var aitisiID = dataItem.AitisisID;
            window.open('@Url.Action("AitisiExperiencePrint", "Admin")?aitisiId=' + aitisiID);
        }
        else {
            MessageBoxAlert("Για να γίνει η εκτύπωση του πίνακα προϋπηρεσιών πρέπει πρώτα να επιλέξετε μια αίτηση.");
        }
    }

    function UpdateGroups() {
        text = "Η διαδικασία αυτή ενημερώνει τις ομάδες ειδικοτήτων για όλες τις αιτήσεις.<br/>";
        text += "Να γίνει η ενημέρωση των ειδικοτήτων με τις αντίστοιχες ομάδες τους;"
        MessageBoxConfirm(text, "Ενημέρωση ομάδων ειδικοτήτων").done(function () {
            $('#divLoading').show();
            $.ajax({
                url: '@Url.Action("UpdateAitisiEidikotitaGroup", "Admin")',
                type: 'GET',
                data: "",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#divLoading').hide();
                    if (data) MessageBoxAlert(data);
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.");
                }
            });
        }).fail(function () {
            return;
        });
    }

</script>

<script type="text/javascript">

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item);

        if (dataItem) {
            var prokID = dataItem.ProkirixiID;
            $("#Grid").data("kendoGrid").dataSource.read({ prokirixiId: prokID });
        }
    };

    function data() {
        var masterGrid = $("#Grid").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { aitisiId: dataItem.AitisisID };
        }
        else {
            return { aitisiId: 0 };
        }
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());

        if (dataItem) {
            var aitisiID = dataItem.AitisisID;
            $("#Child1").data("kendoGrid").dataSource.read({ aitisiId: aitisiID });
            $("#Child2").data("kendoGrid").dataSource.read({ aitisiId: aitisiID });
            $("#Child3").data("kendoGrid").dataSource.read({ aitisiId: aitisiID });
        }
    }

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

</script>