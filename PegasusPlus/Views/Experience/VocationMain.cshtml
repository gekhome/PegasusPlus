@using PegasusPlus.Models
@using PegasusPlus.DAL

@{
    ViewBag.Title = "Επαγγελματική εμπειρία";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}

<div class="page-header">
    <div style="margin:5px 60px 5px 40px">
        <span style="font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #696969">
            <font style="color:#292929;">Καταχώρηση επαγγελματικών προϋπηρεσίων</font>
        </span>
        <span style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:16px">
            @Html.ActionLink("Επιστροφή", "Index", "Teachers", null, new { @class = "btn btn-warning", style = "font-size:16px" })
        </span>
        <button class="btn btn-info" style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:16px" onclick="RefreshGrid()">Ανανέωση</button>
    </div>
</div>

<div class="body-content mt-3" style="margin:5px 30px 5px 30px;background-color:#4f81bd;padding:4px 4px 4px 4px;min-height:40px">
    <label style="font-size:14px;font-weight:bold;color:white"> Επιλογή αίτησης: </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlAitisi")
        .DataTextField("AitisisInfo")
        .DataValueField("AitisisID")
        .HtmlAttributes(new { style = "width:640px;font-size:14px;font-weight:bold;margin-top:2px" })
        .OptionLabel("Επιλογή...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetAitisiSelector", "Experience"); }); })
        .Events(e =>
        {
            e.Select("ddlselect");
        })
    )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().Grid<WorkVocationViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
        columns.Bound(c => c.DateStart).Width(20).Title("Από").Groupable(false);
        columns.Bound(c => c.DateFinal).Width(20).Title("Έως").Groupable(false);
        columns.Bound(c => c.DaysAuto).Width(20).Groupable(false).HtmlAttributes(new { title = "Αυτόματος υπολογισμός βάσει έτους πλήρους απασχόλησης" });
        columns.Bound(c => c.DaysManual).Width(20).Groupable(false).HtmlAttributes(new { title = "Παρακάμπτει τον αυτόματο υπολογισμός ημερών απασχόλησης" });
        columns.Bound(c => c.Moria).Width(20).Groupable(false);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
        columns.Template(@<text></text>)
        .ClientTemplate(
        "<a class=\"k-button k-button-icontext\" href='" + Url.Action("UploadVocation", "Experience") + "?uploadId=#=ExperienceID#' target = _blank><span class=\"k-icon k-add\"></span>Ανέβασμα</a>"
        ).Width(25);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(640).Title("Επεξεργασία επαγγελματικής εμπειρίας")).TemplateName("FormVocation"))
        .HtmlAttributes(new { style = "font-size:14px" })
        .Events(e => e.Edit("onEdited"))
        .Navigatable()
        .Selectable()
        .Groupable()
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(360))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(40)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.ExperienceID);
            model.Field(p => p.Moria).Editable(false);
            model.Field(p => p.DaysAuto).Editable(false);
        })
        //.Group(groups => groups.Add(p => p.TeachType))
        .Create(create => create.Action("Vocation_Create", "Experience").Data("data"))
        .Read(read => read.Action("Vocation_Read", "Experience").Data("data"))
        .Update(update => update.Action("Vocation_Update", "Experience").Data("data"))
        .Destroy(destroy => destroy.Action("Vocation_Destroy", "Experience"))
        .Events(events => events.Error("error_handler1"))
        ) @* datasource*@
        .Events(e => e.Change("change"))
    )
</div>

<div class="body-content mt-3" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().Grid<UploadsVocationViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "font-size:14px" })
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(240))
        .Columns(columns =>
        {
            columns.Bound(c => c.UploadFileID).Width(20).Hidden();
            columns.Bound(c => c.FileName).Width(40);
            columns.Bound(c => c.Description).Width(30);
            columns.Bound(c => c.Category).Width(20);
            columns.Command(command => { command.Destroy(); }).Width(20);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("DownloadVocationFile", "Experience") + "?file_id=#=UploadFileID#'><span class=\"k-icon k-update\"></span>Προβολή</a>"
            ).Width(20);
        })
        .DataSource(ds => ds
        .Ajax()
        .Batch(false)
        .PageSize(20)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.UploadFileID);
        })
        .Read(read => read.Action("UploadVocationFiles_Read", "Experience").Data("data2"))
        .Destroy(destroy => destroy.Action("UploadVocationFiles_Destroy", "Experience"))
        .Events(events => events.Error("error_handler2"))
        )
    )
</div>


<script type="text/javascript">

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item);
        var aitisisID = $("#ddlAitisi").data("kendoDropDownList").value();

        if (dataItem) {
            var aitisisID = dataItem.AitisisID
            $("#Master").data("kendoGrid").dataSource.read({ aitisiId: aitisisID });
        }
        else {
            $("#Master").data("kendoGrid").dataSource.read({ aitisiId: 0 });
        }
    };

    function data() {
        var aitisisID = $("#ddlAitisi").data("kendoDropDownList").value();

        if (aitisisID > 0) {
            return { aitisiId: aitisisID };
        }
        else {
            return { aitisiId: 0 };
        }
    }

    function onEdited(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshGrid(e); });
    }

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Master").data("kendoGrid").dataSource.read();
    }

</script>

<script type="text/javascript">

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var experienceID = dataItem.ExperienceID;

        $("#Child").data("kendoGrid").dataSource.read({ expID: experienceID });
    }

    function data2() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { expID: dataItem.ExperienceID };
        }
        else {
            return { expID: 0 };
        }
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>